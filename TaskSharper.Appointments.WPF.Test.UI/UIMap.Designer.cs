// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TaskSharper.Appointments.WPF.Test.UI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertTitleIsTestTitle - Use 'AssertTitleIsTestTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTitleIsTestTitle()
        {
            #region Variable Declarations
            WpfText uITestTitleText = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UITestTitleText;
            #endregion

            // Verify that the 'DisplayText' property of 'TestTitle' label equals 'TestTitle'
            Assert.AreEqual(this.AssertTitleIsTestTitleExpectedValues.UITestTitleTextDisplayText, uITestTitleText.DisplayText);
        }
        
        /// <summary>
        /// AssertTitleIsUpdatedTitle - Use 'AssertTitleIsUpdatedTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTitleIsUpdatedTitle()
        {
            #region Variable Declarations
            WpfText uIUpdatedTitleText = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleText;
            #endregion

            // Verify that the 'DisplayText' property of 'UpdatedTitle' label equals 'UpdatedTitle'
            Assert.AreEqual(this.AssertTitleIsUpdatedTitleExpectedValues.UIUpdatedTitleTextDisplayText, uIUpdatedTitleText.DisplayText);
        }
        
        /// <summary>
        /// UpdateAppointment - Use 'UpdateAppointmentParams' to pass parameters into this method.
        /// </summary>
        public void UpdateAppointment()
        {
            #region Variable Declarations
            WpfText uITestTitleText = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UITestTitleText;
            WpfButton uIEditButtonButton = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UIEditButtonButton;
            WpfEdit uITitleTextBoxEdit1 = this.UITaskSharperAppointmeWindow.UIItemCustom1.UITitleTextBoxEdit1;
            WpfButton uIItemButton1 = this.UITaskSharperAppointmeWindow.UIItemCustom1.UICategoryText.UIItemButton1;
            #endregion

            // Click 'TestTitle' label
            Mouse.Click(uITestTitleText, new Point(96, 31));

            // Click 'EditButton' button
            Mouse.Click(uIEditButtonButton, new Point(46, 54));

            // Type 'UpdatedTitle' in 'TitleTextBox' text box
            uITitleTextBoxEdit1.Text = this.UpdateAppointmentParams.UITitleTextBoxEdit1Text;

            // Click button numbered 5 next to 'Category' label
            Mouse.Click(uIItemButton1, new Point(28, 45));
        }
        
        /// <summary>
        /// TitleErrorTextBox is "Title cannot be empty."
        /// </summary>
        public void AssertTitleErrorTextBoxIsShowingEmptyErrorMessage()
        {
            #region Variable Declarations
            WpfText uITitlecannotbeemptyText = this.UITaskSharperAppointmeWindow.UIItemCustom1.UITitlecannotbeemptyText;
            #endregion

            // Verify that the 'DisplayText' property of 'Title cannot be empty.' label equals 'Title cannot be empty.'
            Assert.AreEqual(this.AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues.UITitlecannotbeemptyTextDisplayText, uITitlecannotbeemptyText.DisplayText);
        }
        
        /// <summary>
        /// Error message is "Can only create an event within the same day."
        /// </summary>
        public void AssertDateTimeErrorIsShowingDateSpanGreaterThanOneError()
        {
            #region Variable Declarations
            WpfText uICanonlycreateaneventText = this.UITaskSharperAppointmeWindow.UIItemCustom1.UICanonlycreateaneventText;
            #endregion

            // Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Can only create an event within the same day.'
            Assert.AreEqual(this.AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues.UICanonlycreateaneventTextDisplayText, uICanonlycreateaneventText.DisplayText);
        }
        
        /// <summary>
        /// Error message is "Cannot create an event in the past."
        /// </summary>
        public void AssertDateTimeErrorIsShowingEventInThePastErrorMessage()
        {
            #region Variable Declarations
            WpfText uICanonlycreateaneventText = this.UITaskSharperAppointmeWindow.UIItemCustom1.UICanonlycreateaneventText;
            #endregion

            // Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Cannot create an event in the past.'
            Assert.AreEqual(this.AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues.UICanonlycreateaneventTextDisplayText, uICanonlycreateaneventText.DisplayText);
        }
        
        /// <summary>
        /// Error message is "Start time cannot be later than end time."
        /// </summary>
        public void AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessage()
        {
            #region Variable Declarations
            WpfText uICanonlycreateaneventText = this.UITaskSharperAppointmeWindow.UIItemCustom1.UICanonlycreateaneventText;
            #endregion

            // Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Start time cannot be later than end time.'
            Assert.AreEqual(this.AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues.UICanonlycreateaneventTextDisplayText, uICanonlycreateaneventText.DisplayText);
        }
        
        /// <summary>
        /// OpenAppointmentApplication
        /// </summary>
        public void OpenAppointmentApplication()
        {
            #region Variable Declarations
            WpfButton uIAppointmentApplicatiButton = this.UIMainWindowWindow.UIAppointmentApplicatiButton;
            #endregion

            // Click 'AppointmentApplicationButton' button
            Mouse.Click(uIAppointmentApplicatiButton, new Point(386, 564));
        }
        
        /// <summary>
        /// AssertApplicationIsAppointments - Use 'AssertApplicationIsAppointmentsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertApplicationIsAppointments()
        {
            #region Variable Declarations
            WpfText uIAppointmentsText1 = this.UITaskSharperAppointmeWindow.UIAppointmentsText.UIAppointmentsText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Appointments' label equals 'Appointments'
            Assert.AreEqual(this.AssertApplicationIsAppointmentsExpectedValues.UIAppointmentsText1DisplayText, uIAppointmentsText1.DisplayText);
        }
        
        /// <summary>
        /// DeleteAppointment
        /// </summary>
        public void DeleteAppointment()
        {
            #region Variable Declarations
            WpfText uIUpdatedTitleText = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleText;
            WpfButton uIItemButton1 = this.UITaskSharperAppointmeWindow.UIItemCustom.UIContentScrollViewerPane.UIItemButton1;
            #endregion

            // Click 'UpdatedTitle' label
            Mouse.Click(uIUpdatedTitleText, new Point(137, 23));

            // Click button numbered 3 next to 'ContentScrollViewer' pane
            Mouse.Click(uIItemButton1, new Point(84, 92));
        }
        
        /// <summary>
        /// ClickCancelButton
        /// </summary>
        public void ClickCancelButton()
        {
            #region Variable Declarations
            WpfButton uIItemButton2 = this.UITaskSharperAppointmeWindow.UIItemCustom1.UICategoryText.UIItemButton2;
            #endregion

            // Click button numbered 6 next to 'Category' label
            Mouse.Click(uIItemButton2, new Point(35, 30));
        }
        
        #region Properties
        public virtual AssertTitleIsTestTitleExpectedValues AssertTitleIsTestTitleExpectedValues
        {
            get
            {
                if ((this.mAssertTitleIsTestTitleExpectedValues == null))
                {
                    this.mAssertTitleIsTestTitleExpectedValues = new AssertTitleIsTestTitleExpectedValues();
                }
                return this.mAssertTitleIsTestTitleExpectedValues;
            }
        }
        
        public virtual AssertTitleIsUpdatedTitleExpectedValues AssertTitleIsUpdatedTitleExpectedValues
        {
            get
            {
                if ((this.mAssertTitleIsUpdatedTitleExpectedValues == null))
                {
                    this.mAssertTitleIsUpdatedTitleExpectedValues = new AssertTitleIsUpdatedTitleExpectedValues();
                }
                return this.mAssertTitleIsUpdatedTitleExpectedValues;
            }
        }
        
        public virtual UpdateAppointmentParams UpdateAppointmentParams
        {
            get
            {
                if ((this.mUpdateAppointmentParams == null))
                {
                    this.mUpdateAppointmentParams = new UpdateAppointmentParams();
                }
                return this.mUpdateAppointmentParams;
            }
        }
        
        public virtual AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues
        {
            get
            {
                if ((this.mAssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues == null))
                {
                    this.mAssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues = new AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues();
                }
                return this.mAssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues;
            }
        }
        
        public virtual AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues
        {
            get
            {
                if ((this.mAssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues == null))
                {
                    this.mAssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues = new AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues();
                }
                return this.mAssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues;
            }
        }
        
        public virtual AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues
        {
            get
            {
                if ((this.mAssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues == null))
                {
                    this.mAssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues = new AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues();
                }
                return this.mAssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues;
            }
        }
        
        public virtual AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues
        {
            get
            {
                if ((this.mAssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues == null))
                {
                    this.mAssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues = new AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues();
                }
                return this.mAssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues;
            }
        }
        
        public virtual AssertApplicationIsAppointmentsExpectedValues AssertApplicationIsAppointmentsExpectedValues
        {
            get
            {
                if ((this.mAssertApplicationIsAppointmentsExpectedValues == null))
                {
                    this.mAssertApplicationIsAppointmentsExpectedValues = new AssertApplicationIsAppointmentsExpectedValues();
                }
                return this.mAssertApplicationIsAppointmentsExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UITaskSharperAppointmeWindow UITaskSharperAppointmeWindow
        {
            get
            {
                if ((this.mUITaskSharperAppointmeWindow == null))
                {
                    this.mUITaskSharperAppointmeWindow = new UITaskSharperAppointmeWindow();
                }
                return this.mUITaskSharperAppointmeWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertTitleIsTestTitleExpectedValues mAssertTitleIsTestTitleExpectedValues;
        
        private AssertTitleIsUpdatedTitleExpectedValues mAssertTitleIsUpdatedTitleExpectedValues;
        
        private UpdateAppointmentParams mUpdateAppointmentParams;
        
        private AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues mAssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues;
        
        private AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues mAssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues;
        
        private AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues mAssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues;
        
        private AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues mAssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues;
        
        private AssertApplicationIsAppointmentsExpectedValues mAssertApplicationIsAppointmentsExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UITaskSharperAppointmeWindow mUITaskSharperAppointmeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTitleIsTestTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTitleIsTestTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'TestTitle' label equals 'TestTitle'
        /// </summary>
        public string UITestTitleTextDisplayText = "TestTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTitleIsUpdatedTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTitleIsUpdatedTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'UpdatedTitle' label equals 'UpdatedTitle'
        /// </summary>
        public string UIUpdatedTitleTextDisplayText = "UpdatedTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateAppointment'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UpdateAppointmentParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'UpdatedTitle' in 'TitleTextBox' text box
        /// </summary>
        public string UITitleTextBoxEdit1Text = "UpdatedTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTitleErrorTextBoxIsShowingEmptyErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTitleErrorTextBoxIsShowingEmptyErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Title cannot be empty.' label equals 'Title cannot be empty.'
        /// </summary>
        public string UITitlecannotbeemptyTextDisplayText = "Title cannot be empty.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDateTimeErrorIsShowingDateSpanGreaterThanOneError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDateTimeErrorIsShowingDateSpanGreaterThanOneErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Can only create an event within the same day.'
        /// </summary>
        public string UICanonlycreateaneventTextDisplayText = "Can only create an event within the same day.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDateTimeErrorIsShowingEventInThePastErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDateTimeErrorIsShowingEventInThePastErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Cannot create an event in the past.'
        /// </summary>
        public string UICanonlycreateaneventTextDisplayText = "Cannot create an event in the past.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessage'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertDateTimeErrorIsShowingEndTimeBeforeStartTimeErrorMessageExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Can only create an event within the same day.' label equals 'Start time cannot be later than end time.'
        /// </summary>
        public string UICanonlycreateaneventTextDisplayText = "Start time cannot be later than end time.";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertApplicationIsAppointments'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertApplicationIsAppointmentsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Appointments' label equals 'Appointments'
        /// </summary>
        public string UIAppointmentsText1DisplayText = "Appointments";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIAppointmentApplicatiButton
        {
            get
            {
                if ((this.mUIAppointmentApplicatiButton == null))
                {
                    this.mUIAppointmentApplicatiButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAppointmentApplicatiButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AppointmentApplicationButton";
                    this.mUIAppointmentApplicatiButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAppointmentApplicatiButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIAppointmentApplicatiButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITaskSharperAppointmeWindow : WpfWindow
    {
        
        public UITaskSharperAppointmeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TaskSharperAppointments";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIStartTimePickerCustom UIStartTimePickerCustom
        {
            get
            {
                if ((this.mUIStartTimePickerCustom == null))
                {
                    this.mUIStartTimePickerCustom = new UIStartTimePickerCustom(this);
                }
                return this.mUIStartTimePickerCustom;
            }
        }
        
        public UIEndTimePickerCustom UIEndTimePickerCustom
        {
            get
            {
                if ((this.mUIEndTimePickerCustom == null))
                {
                    this.mUIEndTimePickerCustom = new UIEndTimePickerCustom(this);
                }
                return this.mUIEndTimePickerCustom;
            }
        }
        
        public UIAppointmentsText UIAppointmentsText
        {
            get
            {
                if ((this.mUIAppointmentsText == null))
                {
                    this.mUIAppointmentsText = new UIAppointmentsText(this);
                }
                return this.mUIAppointmentsText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private UIStartTimePickerCustom mUIStartTimePickerCustom;
        
        private UIEndTimePickerCustom mUIEndTimePickerCustom;
        
        private UIAppointmentsText mUIAppointmentsText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.AppointmentCardContainerView";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public UIContentScrollViewerPane UIContentScrollViewerPane
        {
            get
            {
                if ((this.mUIContentScrollViewerPane == null))
                {
                    this.mUIContentScrollViewerPane = new UIContentScrollViewerPane(this);
                }
                return this.mUIContentScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentScrollViewerPane mUIContentScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentScrollViewerPane : WpfPane
    {
        
        public UIContentScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ContentScrollViewer";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.AppointmentCardView";
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.Instance] = "5";
                    this.mUIItemCustom.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfText UITestTitleText
        {
            get
            {
                if ((this.mUITestTitleText == null))
                {
                    this.mUITestTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mUITestTitleText.SearchProperties[WpfText.PropertyNames.Name] = "TestTitle";
                    this.mUITestTitleText.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUITestTitleText;
            }
        }
        
        public UIItem2100Text UIItem2100Text
        {
            get
            {
                if ((this.mUIItem2100Text == null))
                {
                    this.mUIItem2100Text = new UIItem2100Text(this);
                }
                return this.mUIItem2100Text;
            }
        }
        
        public WpfButton UIEditButtonButton
        {
            get
            {
                if ((this.mUIEditButtonButton == null))
                {
                    this.mUIEditButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEditButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditButton";
                    this.mUIEditButtonButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "TestTitle";
                    this.mUIEditButtonButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIEditButtonButton;
            }
        }
        
        public WpfText UIUpdatedTitleText
        {
            get
            {
                if ((this.mUIUpdatedTitleText == null))
                {
                    this.mUIUpdatedTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mUIUpdatedTitleText.SearchProperties[WpfText.PropertyNames.Name] = "UpdatedTitle";
                    this.mUIUpdatedTitleText.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIUpdatedTitleText;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "3";
                    this.mUIItemButton1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton1.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfCustom mUIItemCustom;
        
        private WpfText mUITestTitleText;
        
        private UIItem2100Text mUIItem2100Text;
        
        private WpfButton mUIEditButtonButton;
        
        private WpfText mUIUpdatedTitleText;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem2100Text : WpfText
    {
        
        public UIItem2100Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "21:00";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EventModificationView";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public UITitleText UITitleText
        {
            get
            {
                if ((this.mUITitleText == null))
                {
                    this.mUITitleText = new UITitleText(this);
                }
                return this.mUITitleText;
            }
        }
        
        public UIDescriptionText UIDescriptionText
        {
            get
            {
                if ((this.mUIDescriptionText == null))
                {
                    this.mUIDescriptionText = new UIDescriptionText(this);
                }
                return this.mUIDescriptionText;
            }
        }
        
        public UIStatusText UIStatusText
        {
            get
            {
                if ((this.mUIStatusText == null))
                {
                    this.mUIStatusText = new UIStatusText(this);
                }
                return this.mUIStatusText;
            }
        }
        
        public UICategoryText UICategoryText
        {
            get
            {
                if ((this.mUICategoryText == null))
                {
                    this.mUICategoryText = new UICategoryText(this);
                }
                return this.mUICategoryText;
            }
        }
        
        public WpfEdit UITitleTextBoxEdit
        {
            get
            {
                if ((this.mUITitleTextBoxEdit == null))
                {
                    this.mUITitleTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleTextBox";
                    this.mUITitleTextBoxEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUITitleTextBoxEdit.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUITitleTextBoxEdit;
            }
        }
        
        public WpfEdit UIDescriptionTextBoxEdit
        {
            get
            {
                if ((this.mUIDescriptionTextBoxEdit == null))
                {
                    this.mUIDescriptionTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDescriptionTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DescriptionTextBox";
                    this.mUIDescriptionTextBoxEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDescriptionTextBoxEdit.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIDescriptionTextBoxEdit;
            }
        }
        
        public WpfEdit UITitleTextBoxEdit1
        {
            get
            {
                if ((this.mUITitleTextBoxEdit1 == null))
                {
                    this.mUITitleTextBoxEdit1 = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleTextBoxEdit1.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleTextBox";
                    this.mUITitleTextBoxEdit1.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUITitleTextBoxEdit1;
            }
        }
        
        public WpfText UITitlecannotbeemptyText
        {
            get
            {
                if ((this.mUITitlecannotbeemptyText == null))
                {
                    this.mUITitlecannotbeemptyText = new WpfText(this);
                    #region Search Criteria
                    this.mUITitlecannotbeemptyText.SearchProperties[WpfText.PropertyNames.AutomationId] = "TitleErrorTextBox";
                    this.mUITitlecannotbeemptyText.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUITitlecannotbeemptyText;
            }
        }
        
        public WpfText UICanonlycreateaneventText
        {
            get
            {
                if ((this.mUICanonlycreateaneventText == null))
                {
                    this.mUICanonlycreateaneventText = new WpfText(this);
                    #region Search Criteria
                    this.mUICanonlycreateaneventText.SearchProperties[WpfText.PropertyNames.AutomationId] = "DateTimeErrorTextBox";
                    this.mUICanonlycreateaneventText.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUICanonlycreateaneventText;
            }
        }
        #endregion
        
        #region Fields
        private UITitleText mUITitleText;
        
        private UIDescriptionText mUIDescriptionText;
        
        private UIStatusText mUIStatusText;
        
        private UICategoryText mUICategoryText;
        
        private WpfEdit mUITitleTextBoxEdit;
        
        private WpfEdit mUIDescriptionTextBoxEdit;
        
        private WpfEdit mUITitleTextBoxEdit1;
        
        private WpfText mUITitlecannotbeemptyText;
        
        private WpfText mUICanonlycreateaneventText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITitleText : WpfText
    {
        
        public UITitleText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Title";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDescriptionText : WpfText
    {
        
        public UIDescriptionText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Description";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStatusText : WpfText
    {
        
        public UIStatusText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Status";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICategoryText : WpfText
    {
        
        public UICategoryText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Category";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "4";
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "5";
                    this.mUIItemButton1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton1.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIItemButton2
        {
            get
            {
                if ((this.mUIItemButton2 == null))
                {
                    this.mUIItemButton2 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton2.SearchProperties[WpfButton.PropertyNames.Instance] = "6";
                    this.mUIItemButton2.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton2.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton2;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIItemButton2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartTimePickerCustom : WpfCustom
    {
        
        public UIStartTimePickerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimePickerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartTimePicker";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public UIDatePickerCalendarCalendar UIDatePickerCalendarCalendar
        {
            get
            {
                if ((this.mUIDatePickerCalendarCalendar == null))
                {
                    this.mUIDatePickerCalendarCalendar = new UIDatePickerCalendarCalendar(this);
                }
                return this.mUIDatePickerCalendarCalendar;
            }
        }
        #endregion
        
        #region Fields
        private UIDatePickerCalendarCalendar mUIDatePickerCalendarCalendar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDatePickerCalendarCalendar : WpfCalendar
    {
        
        public UIDatePickerCalendarCalendar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "DatePickerCalendar";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIStartDateButton
        {
            get
            {
                if ((this.mUIStartDateButton == null))
                {
                    this.mUIStartDateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartDateButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIStartDateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIStartDateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndTimePickerCustom : WpfCustom
    {
        
        public UIEndTimePickerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimePickerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "EndTimePicker";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public UIDatePickerCalendarCalendar1 UIDatePickerCalendarCalendar
        {
            get
            {
                if ((this.mUIDatePickerCalendarCalendar == null))
                {
                    this.mUIDatePickerCalendarCalendar = new UIDatePickerCalendarCalendar1(this);
                }
                return this.mUIDatePickerCalendarCalendar;
            }
        }
        
        public UIHourListBoxList UIHourListBoxList
        {
            get
            {
                if ((this.mUIHourListBoxList == null))
                {
                    this.mUIHourListBoxList = new UIHourListBoxList(this);
                }
                return this.mUIHourListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private UIDatePickerCalendarCalendar1 mUIDatePickerCalendarCalendar;
        
        private UIHourListBoxList mUIHourListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDatePickerCalendarCalendar1 : WpfCalendar
    {
        
        public UIDatePickerCalendarCalendar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "DatePickerCalendar";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIEndDateButton
        {
            get
            {
                if ((this.mUIEndDateButton == null))
                {
                    this.mUIEndDateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEndDateButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIEndDateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIEndDateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHourListBoxList : WpfList
    {
        
        public UIHourListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "HourListBox";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAppointmentsText : WpfText
    {
        
        public UIAppointmentsText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "ApplicationTitle";
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfText UIAppointmentsText1
        {
            get
            {
                if ((this.mUIAppointmentsText1 == null))
                {
                    this.mUIAppointmentsText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIAppointmentsText1.SearchProperties[WpfText.PropertyNames.Name] = "Appointments";
                    this.mUIAppointmentsText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIAppointmentsText1.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIAppointmentsText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIAppointmentsText1;
        #endregion
    }
}
