// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace TaskSharper.Tasks.WPF.Test.UI
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertTaskIsCreatedWithTitleTestTitle - Use 'AssertTaskIsCreatedWithTitleTestTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTaskIsCreatedWithTitleTestTitle()
        {
            #region Variable Declarations
            WpfText uITestTitleText = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UITestTitleText;
            #endregion

            // Verify that the 'DisplayText' property of 'TestTitle' label equals 'TestTitle'
            Assert.AreEqual(this.AssertTaskIsCreatedWithTitleTestTitleExpectedValues.UITestTitleTextDisplayText, uITestTitleText.DisplayText);
        }
        
        /// <summary>
        /// AssertTaskIsUpdatedWithTitleUpdatedTitle - Use 'AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTaskIsUpdatedWithTitleUpdatedTitle()
        {
            #region Variable Declarations
            WpfText uIUpdatedTitleText = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleText;
            #endregion

            // Verify that the 'DisplayText' property of 'UpdatedTitle' label equals 'UpdatedTitle'
            Assert.AreEqual(this.AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues.UIUpdatedTitleTextDisplayText, uIUpdatedTitleText.DisplayText);
        }
        
        /// <summary>
        /// AssertTaskWithTitleUpdatedTitleIsChecked - Use 'AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTaskWithTitleUpdatedTitleIsChecked()
        {
            #region Variable Declarations
            WpfCheckBox uIUpdatedTitleCheckBox = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'UpdatedTitle' check box equals 'True'
            Assert.AreEqual(this.AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues.UIUpdatedTitleCheckBoxChecked, uIUpdatedTitleCheckBox.Checked);
        }
        
        /// <summary>
        /// AssertTaskWithTitleUpdatedTitleIsUnchecked - Use 'AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTaskWithTitleUpdatedTitleIsUnchecked()
        {
            #region Variable Declarations
            WpfCheckBox uIUpdatedTitleCheckBox = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleCheckBox;
            #endregion

            // Verify that the 'Checked' property of 'UpdatedTitle' check box equals 'False'
            Assert.AreEqual(this.AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues.UIUpdatedTitleCheckBoxChecked, uIUpdatedTitleCheckBox.Checked);
        }
        
        /// <summary>
        /// ClickCheckboxForTaskWhereTitleIsUpdatedTitle - Use 'ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams' to pass parameters into this method.
        /// </summary>
        public void ClickCheckboxForTaskWhereTitleIsUpdatedTitle()
        {
            #region Variable Declarations
            WpfCheckBox uIUpdatedTitleCheckBox = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleCheckBox;
            #endregion

            // Select 'UpdatedTitle' check box
            uIUpdatedTitleCheckBox.Checked = this.ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams.UIUpdatedTitleCheckBoxChecked;
        }
        
        /// <summary>
        /// CloseTaskApplication
        /// </summary>
        public void CloseTaskApplication()
        {
            #region Variable Declarations
            WpfButton uICloseApplicationButtButton = this.UITaskSharperTasksWindow.UICloseApplicationButtButton;
            #endregion

            // Click 'CloseApplicationButton' button
            Mouse.Click(uICloseApplicationButtButton, new Point(86, 55));
        }
        
        /// <summary>
        /// DeleteTask
        /// </summary>
        public void DeleteTask()
        {
            #region Variable Declarations
            WpfText uIUpdatedTitleText = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIUpdatedTitleText;
            WpfButton uIItemButton1 = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UIItemButton1;
            #endregion

            // Click 'UpdatedTitle' label
            Mouse.Click(uIUpdatedTitleText, new Point(118, 20));

            // Click button numbered 3 next to 'ContentScrollViewer' pane
            Mouse.Click(uIItemButton1, new Point(66, 79));
        }
        
        /// <summary>
        /// OpenTaskApplication
        /// </summary>
        public void OpenTaskApplication()
        {
            #region Variable Declarations
            WpfButton uITaskApplicationButtoButton = this.UIMainWindowWindow.UITaskApplicationButtoButton;
            #endregion

            // Click 'TaskApplicationButton' button
            Mouse.Click(uITaskApplicationButtoButton, new Point(314, 446));
        }
        
        /// <summary>
        /// UpdateTask - Use 'UpdateTaskParams' to pass parameters into this method.
        /// </summary>
        public void UpdateTask()
        {
            #region Variable Declarations
            WpfButton uITestTitleButton = this.UITaskSharperTasksWindow.UIItemCustom.UIContentScrollViewerPane.UITestTitleButton;
            WpfEdit uITitleTextBoxEdit = this.UITaskSharperTasksWindow.UIItemCustom1.UITitleTextBoxEdit;
            WpfButton uIItemButton1 = this.UITaskSharperTasksWindow.UIItemCustom1.UICategoryText.UIItemButton1;
            #endregion

            // Click 'TestTitle' button
            Mouse.Click(uITestTitleButton, new Point(40, 46));

            // Type 'UpdatedTitle' in 'TitleTextBox' text box
            uITitleTextBoxEdit.Text = this.UpdateTaskParams.UITitleTextBoxEditText;

            // Click button numbered 5 next to 'Category' label
            Mouse.Click(uIItemButton1, new Point(26, 37));
        }
        
        /// <summary>
        /// AssertTaskApplicationIsOpen - Use 'AssertTaskApplicationIsOpenExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertTaskApplicationIsOpen()
        {
            #region Variable Declarations
            WpfText uITasksText1 = this.UITaskSharperTasksWindow.UITasksText.UITasksText1;
            #endregion

            // Verify that the 'DisplayText' property of 'Tasks' label equals 'Tasks'
            Assert.AreEqual(this.AssertTaskApplicationIsOpenExpectedValues.UITasksText1DisplayText, uITasksText1.DisplayText);
        }
        
        #region Properties
        public virtual AssertTaskIsCreatedWithTitleTestTitleExpectedValues AssertTaskIsCreatedWithTitleTestTitleExpectedValues
        {
            get
            {
                if ((this.mAssertTaskIsCreatedWithTitleTestTitleExpectedValues == null))
                {
                    this.mAssertTaskIsCreatedWithTitleTestTitleExpectedValues = new AssertTaskIsCreatedWithTitleTestTitleExpectedValues();
                }
                return this.mAssertTaskIsCreatedWithTitleTestTitleExpectedValues;
            }
        }
        
        public virtual AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues
        {
            get
            {
                if ((this.mAssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues == null))
                {
                    this.mAssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues = new AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues();
                }
                return this.mAssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues;
            }
        }
        
        public virtual AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues
        {
            get
            {
                if ((this.mAssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues == null))
                {
                    this.mAssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues = new AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues();
                }
                return this.mAssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues;
            }
        }
        
        public virtual AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues
        {
            get
            {
                if ((this.mAssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues == null))
                {
                    this.mAssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues = new AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues();
                }
                return this.mAssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues;
            }
        }
        
        public virtual ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams
        {
            get
            {
                if ((this.mClickCheckboxForTaskWhereTitleIsUpdatedTitleParams == null))
                {
                    this.mClickCheckboxForTaskWhereTitleIsUpdatedTitleParams = new ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams();
                }
                return this.mClickCheckboxForTaskWhereTitleIsUpdatedTitleParams;
            }
        }
        
        public virtual UpdateTaskParams UpdateTaskParams
        {
            get
            {
                if ((this.mUpdateTaskParams == null))
                {
                    this.mUpdateTaskParams = new UpdateTaskParams();
                }
                return this.mUpdateTaskParams;
            }
        }
        
        public virtual AssertTaskApplicationIsOpenExpectedValues AssertTaskApplicationIsOpenExpectedValues
        {
            get
            {
                if ((this.mAssertTaskApplicationIsOpenExpectedValues == null))
                {
                    this.mAssertTaskApplicationIsOpenExpectedValues = new AssertTaskApplicationIsOpenExpectedValues();
                }
                return this.mAssertTaskApplicationIsOpenExpectedValues;
            }
        }
        
        public UITaskSharperAppointmeWindow UITaskSharperAppointmeWindow
        {
            get
            {
                if ((this.mUITaskSharperAppointmeWindow == null))
                {
                    this.mUITaskSharperAppointmeWindow = new UITaskSharperAppointmeWindow();
                }
                return this.mUITaskSharperAppointmeWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UITaskSharperTasksWindow UITaskSharperTasksWindow
        {
            get
            {
                if ((this.mUITaskSharperTasksWindow == null))
                {
                    this.mUITaskSharperTasksWindow = new UITaskSharperTasksWindow();
                }
                return this.mUITaskSharperTasksWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertTaskIsCreatedWithTitleTestTitleExpectedValues mAssertTaskIsCreatedWithTitleTestTitleExpectedValues;
        
        private AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues mAssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues;
        
        private AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues mAssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues;
        
        private AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues mAssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues;
        
        private ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams mClickCheckboxForTaskWhereTitleIsUpdatedTitleParams;
        
        private UpdateTaskParams mUpdateTaskParams;
        
        private AssertTaskApplicationIsOpenExpectedValues mAssertTaskApplicationIsOpenExpectedValues;
        
        private UITaskSharperAppointmeWindow mUITaskSharperAppointmeWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UITaskSharperTasksWindow mUITaskSharperTasksWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTaskIsCreatedWithTitleTestTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTaskIsCreatedWithTitleTestTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'TestTitle' label equals 'TestTitle'
        /// </summary>
        public string UITestTitleTextDisplayText = "TestTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTaskIsUpdatedWithTitleUpdatedTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTaskIsUpdatedWithTitleUpdatedTitleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'UpdatedTitle' label equals 'UpdatedTitle'
        /// </summary>
        public string UIUpdatedTitleTextDisplayText = "UpdatedTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTaskWithTitleUpdatedTitleIsChecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTaskWithTitleUpdatedTitleIsCheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'UpdatedTitle' check box equals 'True'
        /// </summary>
        public bool UIUpdatedTitleCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTaskWithTitleUpdatedTitleIsUnchecked'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTaskWithTitleUpdatedTitleIsUncheckedExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Checked' property of 'UpdatedTitle' check box equals 'False'
        /// </summary>
        public bool UIUpdatedTitleCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ClickCheckboxForTaskWhereTitleIsUpdatedTitle'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ClickCheckboxForTaskWhereTitleIsUpdatedTitleParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'UpdatedTitle' check box
        /// </summary>
        public bool UIUpdatedTitleCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UpdateTask'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UpdateTaskParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'UpdatedTitle' in 'TitleTextBox' text box
        /// </summary>
        public string UITitleTextBoxEditText = "UpdatedTitle";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertTaskApplicationIsOpen'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertTaskApplicationIsOpenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Tasks' label equals 'Tasks'
        /// </summary>
        public string UITasksText1DisplayText = "Tasks";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITaskSharperAppointmeWindow : WpfWindow
    {
        
        public UITaskSharperAppointmeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TaskSharperAppointments";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TaskSharperAppointments");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "4";
                    this.mUIItemButton.WindowTitles.Add("TaskSharperAppointments");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UITaskApplicationButtoButton
        {
            get
            {
                if ((this.mUITaskApplicationButtoButton == null))
                {
                    this.mUITaskApplicationButtoButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITaskApplicationButtoButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TaskApplicationButton";
                    this.mUITaskApplicationButtoButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITaskApplicationButtoButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUITaskApplicationButtoButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITaskSharperTasksWindow : WpfWindow
    {
        
        public UITaskSharperTasksWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TaskSharperTasks";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public UIStartTimePickerCustom UIStartTimePickerCustom
        {
            get
            {
                if ((this.mUIStartTimePickerCustom == null))
                {
                    this.mUIStartTimePickerCustom = new UIStartTimePickerCustom(this);
                }
                return this.mUIStartTimePickerCustom;
            }
        }
        
        public UIEndTimePickerCustom UIEndTimePickerCustom
        {
            get
            {
                if ((this.mUIEndTimePickerCustom == null))
                {
                    this.mUIEndTimePickerCustom = new UIEndTimePickerCustom(this);
                }
                return this.mUIEndTimePickerCustom;
            }
        }
        
        public WpfButton UICloseApplicationButtButton
        {
            get
            {
                if ((this.mUICloseApplicationButtButton == null))
                {
                    this.mUICloseApplicationButtButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseApplicationButtButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CloseApplicationButton";
                    this.mUICloseApplicationButtButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUICloseApplicationButtButton;
            }
        }
        
        public UITasksText UITasksText
        {
            get
            {
                if ((this.mUITasksText == null))
                {
                    this.mUITasksText = new UITasksText(this);
                }
                return this.mUITasksText;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private UIStartTimePickerCustom mUIStartTimePickerCustom;
        
        private UIEndTimePickerCustom mUIEndTimePickerCustom;
        
        private WpfButton mUICloseApplicationButtButton;
        
        private UITasksText mUITasksText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.TaskCardContainerView";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public UIContentScrollViewerPane UIContentScrollViewerPane
        {
            get
            {
                if ((this.mUIContentScrollViewerPane == null))
                {
                    this.mUIContentScrollViewerPane = new UIContentScrollViewerPane(this);
                }
                return this.mUIContentScrollViewerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIContentScrollViewerPane mUIContentScrollViewerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIContentScrollViewerPane : WpfPane
    {
        
        public UIContentScrollViewerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "ContentScrollViewer";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfText UITestTitleText
        {
            get
            {
                if ((this.mUITestTitleText == null))
                {
                    this.mUITestTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mUITestTitleText.SearchProperties[WpfText.PropertyNames.Name] = "TestTitle";
                    this.mUITestTitleText.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUITestTitleText;
            }
        }
        
        public WpfButton UITestTitleButton
        {
            get
            {
                if ((this.mUITestTitleButton == null))
                {
                    this.mUITestTitleButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITestTitleButton.SearchProperties[WpfButton.PropertyNames.HelpText] = "TestTitle";
                    this.mUITestTitleButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUITestTitleButton;
            }
        }
        
        public WpfText UIUpdatedTitleText
        {
            get
            {
                if ((this.mUIUpdatedTitleText == null))
                {
                    this.mUIUpdatedTitleText = new WpfText(this);
                    #region Search Criteria
                    this.mUIUpdatedTitleText.SearchProperties[WpfText.PropertyNames.Name] = "UpdatedTitle";
                    this.mUIUpdatedTitleText.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIUpdatedTitleText;
            }
        }
        
        public WpfCheckBox UIUpdatedTitleCheckBox
        {
            get
            {
                if ((this.mUIUpdatedTitleCheckBox == null))
                {
                    this.mUIUpdatedTitleCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIUpdatedTitleCheckBox.SearchProperties[WpfCheckBox.PropertyNames.HelpText] = "UpdatedTitle";
                    this.mUIUpdatedTitleCheckBox.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIUpdatedTitleCheckBox;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "3";
                    this.mUIItemButton1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton1.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfText mUITestTitleText;
        
        private WpfButton mUITestTitleButton;
        
        private WpfText mUIUpdatedTitleText;
        
        private WpfCheckBox mUIUpdatedTitleCheckBox;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.EventModificationView";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITitleTextBoxEdit
        {
            get
            {
                if ((this.mUITitleTextBoxEdit == null))
                {
                    this.mUITitleTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleTextBox";
                    this.mUITitleTextBoxEdit.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUITitleTextBoxEdit;
            }
        }
        
        public WpfEdit UIDescriptionTextBoxEdit
        {
            get
            {
                if ((this.mUIDescriptionTextBoxEdit == null))
                {
                    this.mUIDescriptionTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIDescriptionTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "DescriptionTextBox";
                    this.mUIDescriptionTextBoxEdit.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIDescriptionTextBoxEdit;
            }
        }
        
        public UIStatusText UIStatusText
        {
            get
            {
                if ((this.mUIStatusText == null))
                {
                    this.mUIStatusText = new UIStatusText(this);
                }
                return this.mUIStatusText;
            }
        }
        
        public UICategoryText UICategoryText
        {
            get
            {
                if ((this.mUICategoryText == null))
                {
                    this.mUICategoryText = new UICategoryText(this);
                }
                return this.mUICategoryText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITitleTextBoxEdit;
        
        private WpfEdit mUIDescriptionTextBoxEdit;
        
        private UIStatusText mUIStatusText;
        
        private UICategoryText mUICategoryText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStatusText : WpfText
    {
        
        public UIStatusText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Status";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICategoryText : WpfText
    {
        
        public UICategoryText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Category";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "4";
                    this.mUIItemButton.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Instance] = "5";
                    this.mUIItemButton1.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemButton1.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIStartTimePickerCustom : WpfCustom
    {
        
        public UIStartTimePickerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimePickerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "StartTimePicker";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public UIDatePickerCalendarCalendar UIDatePickerCalendarCalendar
        {
            get
            {
                if ((this.mUIDatePickerCalendarCalendar == null))
                {
                    this.mUIDatePickerCalendarCalendar = new UIDatePickerCalendarCalendar(this);
                }
                return this.mUIDatePickerCalendarCalendar;
            }
        }
        #endregion
        
        #region Fields
        private UIDatePickerCalendarCalendar mUIDatePickerCalendarCalendar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDatePickerCalendarCalendar : WpfCalendar
    {
        
        public UIDatePickerCalendarCalendar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "DatePickerCalendar";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIStartDateButton
        {
            get
            {
                if ((this.mUIStartDateButton == null))
                {
                    this.mUIStartDateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIStartDateButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIStartDateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIStartDateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEndTimePickerCustom : WpfCustom
    {
        
        public UIEndTimePickerCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.DateTimePickerView";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "EndTimePicker";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public UIDatePickerCalendarCalendar1 UIDatePickerCalendarCalendar
        {
            get
            {
                if ((this.mUIDatePickerCalendarCalendar == null))
                {
                    this.mUIDatePickerCalendarCalendar = new UIDatePickerCalendarCalendar1(this);
                }
                return this.mUIDatePickerCalendarCalendar;
            }
        }
        
        public UIHourListBoxList UIHourListBoxList
        {
            get
            {
                if ((this.mUIHourListBoxList == null))
                {
                    this.mUIHourListBoxList = new UIHourListBoxList(this);
                }
                return this.mUIHourListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private UIDatePickerCalendarCalendar1 mUIDatePickerCalendarCalendar;
        
        private UIHourListBoxList mUIHourListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDatePickerCalendarCalendar1 : WpfCalendar
    {
        
        public UIDatePickerCalendarCalendar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "DatePickerCalendar";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIEndDateButton
        {
            get
            {
                if ((this.mUIEndDateButton == null))
                {
                    this.mUIEndDateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEndDateButton.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIEndDateButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIEndDateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIHourListBoxList : WpfList
    {
        
        public UIHourListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "HourListBox";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfImage UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new WpfImage(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemImage.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        #endregion
        
        #region Fields
        private WpfImage mUIItemImage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITasksText : WpfText
    {
        
        public UITasksText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Tasks";
            this.WindowTitles.Add("TaskSharperTasks");
            #endregion
        }
        
        #region Properties
        public WpfText UITasksText1
        {
            get
            {
                if ((this.mUITasksText1 == null))
                {
                    this.mUITasksText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUITasksText1.SearchProperties[WpfText.PropertyNames.Name] = "Tasks";
                    this.mUITasksText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITasksText1.WindowTitles.Add("TaskSharperTasks");
                    #endregion
                }
                return this.mUITasksText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITasksText1;
        #endregion
    }
}
